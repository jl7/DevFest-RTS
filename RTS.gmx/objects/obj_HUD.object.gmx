<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilization
//player
xoffset = 11;
yoffset = 11;
xsmallgap = 11;
xgap = 50;
hpbar_height = 5;
menu_xoffset = 5;
menu_yoffset = 5;
menu_button_width = 60; 
menu_button_height = 40;
button_inner_xmargin = 8;
button_inner_ymargin = 5;
button_gap = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display resources
var vx = view_xview[player.view];
var vy = view_yview[player.view];

draw_set_font(fDefault);
draw_set_color(c_white);
//TODO: The other player will also see this HUD. Fix it!
if(view_current == player.view){
    var drawx = vx + xoffset;
    var drawy = vy + yoffset;
    draw_sprite(sOsmium, 0, drawx, drawy);
    drawx += 32 + xsmallgap;
    draw_text(drawx, drawy, string(player.osmium));
    
    drawx += xgap;
    draw_sprite(sScience, 0, drawx, drawy);
    drawx += 32 + xsmallgap;
    draw_text(drawx, drawy, string(player.science));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Focus
if(player.focus != noone &amp;&amp; instance_exists(player.focus)){
    if(view_current == player.view){
        draw_set_color(c_red);
        draw_rectangle( player.focus.x, 
                        player.focus.y, 
                        player.focus.x + player.focus.sprite_width, 
                        player.focus.y + player.focus.sprite_height, true);
        
        //Display the hp of the focused unit. For now it always assumes that the 
        //unit has hp
        draw_set_color(c_green); 
        draw_rectangle( player.focus.x, 
                        player.focus.y + player.focus.sprite_height , 
                        player.focus.x + player.focus.sprite_width * player.focus.hp/player.focus.maxhp, 
                        player.focus.y + player.focus.sprite_height + hpbar_height, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display menu

if(view_current == player.view){
    var vx = view_xview[view_current];
    var vy = view_yview[view_current];
    
    draw_set_color(c_gray);
    
    draw_button(vx+menu_xoffset,
                vy + view_hview[view_current] - menu_yoffset - menu_button_height,
                vx + menu_xoffset+ menu_button_width,
                vy + view_hview[view_current] - menu_yoffset, 
                !( cManyMice.button[player.playerID, 0]
                &amp;&amp; cManyMice.xpos[player.playerID] &gt; vx+menu_xoffset
                &amp;&amp; cManyMice.xpos[player.playerID] &lt; vx + menu_xoffset+ menu_button_width
                &amp;&amp; cManyMice.ypos[player.playerID] &gt; vy + view_hview[view_current] - menu_yoffset - menu_button_height
                &amp;&amp; cManyMice.ypos[player.playerID] &lt; vy + view_hview[view_current] - menu_yoffset) );
    draw_sprite_stretched(sMiner, 0, 
                vx+menu_xoffset+button_inner_xmargin, 
                vy + view_hview[view_current] - menu_yoffset - menu_button_height + button_inner_ymargin, 
                menu_button_width - 2*button_inner_xmargin, 
                menu_button_height -2*button_inner_ymargin ); 
    
    draw_button(vx + menu_xoffset+ menu_button_width+button_gap,
                vy + view_hview[view_current] - menu_yoffset - menu_button_height,
                vx + menu_xoffset+ 2*menu_button_width+button_gap,
                vy + view_hview[view_current] - menu_yoffset,
                !( cManyMice.button[player.playerID, 0]
                &amp;&amp; cManyMice.xpos[player.playerID] &gt; vx + menu_xoffset+ menu_button_width+button_gap
                &amp;&amp; cManyMice.xpos[player.playerID] &lt; vx + menu_xoffset+ 2*menu_button_width+button_gap
                &amp;&amp; cManyMice.ypos[player.playerID] &gt; vy + view_hview[view_current] - menu_yoffset - menu_button_height
                &amp;&amp; cManyMice.ypos[player.playerID] &lt; vy + view_hview[view_current] - menu_yoffset) );
    draw_sprite_stretched(sDestroyer, 0, 
                vx + menu_xoffset+ menu_button_width+button_gap + button_inner_xmargin, 
                vy + view_hview[view_current] - menu_yoffset - menu_button_height + button_inner_ymargin, 
                menu_button_width - 2*button_inner_xmargin, 
                menu_button_height -2*button_inner_ymargin ); 
    
    draw_button(vx + menu_xoffset+ 2*menu_button_width+2*button_gap,
                vy + view_hview[view_current] - menu_yoffset - menu_button_height,
                vx + menu_xoffset+ 3*menu_button_width+2*button_gap,
                vy + view_hview[view_current] - menu_yoffset, 
                !( cManyMice.button[player.playerID, 0]
                &amp;&amp; cManyMice.xpos[player.playerID] &gt; vx + menu_xoffset+ 2*menu_button_width+2*button_gap
                &amp;&amp; cManyMice.xpos[player.playerID] &lt; vx + menu_xoffset+ 3*menu_button_width+2*button_gap
                &amp;&amp; cManyMice.ypos[player.playerID] &gt; vy + view_hview[view_current] - menu_yoffset - menu_button_height
                &amp;&amp; cManyMice.ypos[player.playerID] &lt; vy + view_hview[view_current] - menu_yoffset) );
    draw_sprite_stretched(sFighter, 0, 
                vx + menu_xoffset+ 2*menu_button_width+2*button_gap + button_inner_xmargin, 
                vy + view_hview[view_current] - menu_yoffset - menu_button_height + button_inner_ymargin, 
                menu_button_width - 2*button_inner_xmargin, 
                menu_button_height -2*button_inner_ymargin ); 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
