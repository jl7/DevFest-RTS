<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

//numMice is the total number of Mice
//xpos[i] and ypos[i] is the position of the i-th mouse, starting from 0. 
//button[i, j] is whether the j-th button of the i-th mouse is down. 

numMice = manymouse_init();

var i;
for (i = 0; i &lt; numMice; i += 1) {
    xpos[i] = mouse_x;
    ypos[i] = mouse_y;
    var j;
    for (j = 0; j &lt; 5; j += 1) {
        button[i,j] = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update

while (manymouse_poll()) {
    switch (manymouse_get_type()) {
    case 0:
        // MANYMOUSE_EVENT_ABSMOTION
        break;
    case 1:
        // MANYMOUSE_EVENT_RELMOTION
        if (manymouse_get_item() == 0) {
            xpos[manymouse_get_device()] += manymouse_get_value();
            if (xpos[manymouse_get_device()] &lt; 0) { xpos[manymouse_get_device()] = 0; }
            if (xpos[manymouse_get_device()] &gt; room_width) { xpos[manymouse_get_device()] = room_width; }
        } else {
            ypos[manymouse_get_device()] += manymouse_get_value();
            if (ypos[manymouse_get_device()] &lt; 0) { ypos[manymouse_get_device()] = 0; }
            if (ypos[manymouse_get_device()] &gt; room_height) { ypos[manymouse_get_device()] = room_height; }
        }
        break;
    case 2:
        // MANYMOUSE_EVENT_BUTTON
        button[manymouse_get_device(), manymouse_get_item()] = manymouse_get_value();
        break;
    case 3:
        // MANYMOUSE_EVENT_SCROLL
        break;
    case 4:
        // MANYMOUSE_EVENT_DISCONNECT
        show_message("Mouse " + manymouse_get_device() + " disconnected!");
        break;
    case 5:
        // MANYMOUSE_EVENT_MAX
        break;
    }
}

//for(i = 0; i&lt;numMice; i++){
//    if(button[i,0]) show_message(string(xpos[i])+ ","+ string(ypos[i]));
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
