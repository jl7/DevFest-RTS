<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>PhysicalObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate
event_inherited();
//var playerID;
target = noone;
range = 100;
ship_accel = 2;
travelDistance = 0;
mass = power(10,8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update

Kp = 0.0000001;
Kd = -0.00001;

if (instance_exists(target) &amp;&amp; target != noone) {
    if (target.playerID != -1 &amp;&amp; target.playerID != playerID &amp;&amp; distance_to_object(target) &lt; firing_range) { //enemy ship and within range
        // fire at target
    }
    else { // move towards target
        if (target.playerID != -1 &amp;&amp; target.playerID != playerID) {
            target_theta = arctan2(target.y-y,target.x-x);
            targetX = target.x - (firing_range)*cos(target_theta);
            targetY = target.y - (firing_range)*sin(target_theta);
        }
        else {
            targetX = target.x
            targetY = target.y
        }
        ax = Kp * (targetX-x) + Kd * hspeed;
        ay = Kp * (targetY-y) + Kd * vspeed;
        magn_accel = sqrt(ax*ax+ay*ay);
        theta = arctan2(ay,ax);
        ax = cos(theta)*max(magn_accel,ship_accel);
        ay = sin(theta)*max(magn_accel,ship_accel);
        hspeed += ax;
        vspeed += ay;
        /*if (distance_to_object(target) &gt; travelDistance / 2) {
            motion_add(point_direction(x,y,target.x,target.y),ship_accel);
        }
        else {
            motion_add(point_direction(x,y,target.x,target.y),-ship_accel);
            if (position_meeting(x,y,target)) {
                with (target){instance_destroy();}
            }
        }*/
        
    }
}
else { // stop moving if target died
    if (sqrt(hspeed*hspeed + vspeed*vspeed) &gt; ship_accel){
        theta = arctan2(vspeed,hspeed);
        vspeed += ship_accel*sin(theta)*sign(vspeed);
        hspeed += ship_accel*cos(theta)*sign(hspeed);
    }
    else {
        vspeed = 0;
        hspeed = 0;
    }
}

//image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
